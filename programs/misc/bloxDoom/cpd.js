function getBlockIn(_){return map[Math.floor(_[1]/8)][Math.floor(_[0]/8)]}function castFromPos(_,$){let t=0,o=Math.sin(toRad*$),n=Math.cos(toRad*$),r=[..._];for(;1!=getBlockIn(r)&&t<max_dist;)t+=2,r[0]+=2*o,r[1]+=2*n;if(t>=max_dist)return -1;for(;1==getBlockIn(r);)t-=.5,r[0]-=.5*o,r[1]-=.5*n;return t}function init(){fov=128,max_dist=64,toRad=Math.PI/180,facing=0,isInit=!0}function scan(_,$){let t=[],o=0,n=0;for(let r=0;r<fov;r++)o=castFromPos(_,n=r+$-fov/2),t.push(o=Math.cos(toRad*(n-$)));return t}function tryMove(_,$){let t=[...pos];return pos+=_,getBlockIn(pos+=$)&&(pos=t),lp=[s[0],s[1]],1}function tick(){let _=scan(pos,facing),$=[s[0]-lp[0],s[1]-lp[1]];$[0]=Math.ceil($[0]),$[1]=Math.ceil($[1]);for(let t=0;t<128;t++){display[t].forEach(_=>palette[0]);for(let o=0;o<_[t];o++)display[t][32+o]=palette[1],display[t][32-o]=palette[1]}return facing+=.3*(s[2]>96-s[2]<32),$[0]&&$[1]&&(s[0]/=Math.sqrt(2),s[1]/=Math.sqrt(2)),pos,tryMove(Math.sin(facing)*$[0],0),tryMove(0,Math.cos(facing)*$[1]),task=["updateDisplay",["execute"]],1}map=[[1,1,1,1,1,1,1,1],[1,0,0,0,0,1,0,1],[1,0,0,1,1,1,0,1],[1,0,0,1,0,0,0,1],[1,1,0,0,0,1,0,1],[1,0,0,1,1,1,0,1],[1,0,0,0,0,0,0,1],[1,1,1,1,1,1,1,1]];try{isInit}catch{init()}tick();
